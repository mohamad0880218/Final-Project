name: Code testing with automated build checks and unit tests 

on:
  push:
   # branches: [ "master" ]
  pull_request:
   # branches: [ "master" ]

jobs:
  UNIT_TESTING:

    runs-on: ubuntu-latest
    env:
      iNSTANCE_NAME: ${{ secrets.APP_DB_INSTANCE }}
      pASSWORD : ${{ secrets.APP_PASS }}
      pUBLIC_IP_ADDRESS : ${{ secrets.APP_DB_IP }}
      bBNAME : ${{ secrets.APP_PRODUC_NAME }}
      pROJECT_ID : ${{ secrets.APP_PROJECT_ID }}
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install  pytest Flask  numpy app xmlrunner flask_sqlalchemy flake8 pymysql
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Test with pytest
      id: Test
      run: |
        pytest testt.py --junitxml=report.xml
    
    - name: artifacts
      uses: actions/upload-artifact@v3
      with: 
        name: Custom_Artifact
        path: report.xml
  
  CREATING_PUBLISHING_IMAGE:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Login to GitHub Container Registry
      run: |
        
        sudo apt-get install curl
        echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
    - name: Building image
      run: |
        #docker push ghcr.io/mohamad0880218/python:latest
        docker build -t ghcr.io/mohamad0880218/python:latest .
        docker push ghcr.io/mohamad0880218/python:latest
    - name: Testin image 
      run: |
        docker run -d -e DBNAME=\"$dBNAME\" -e INSTANCE_NAME=\"$iNSTANCE_NAME\" -e PROJECT_ID=\"$pROJECT_ID\" -e PUBLIC_IP_ADDRESS=\"$pUBLIC_IP_ADDRESS \" -e PASSWORD=\"$pWORD \" -p 5000:5000 ghcr.io/mohamad0880218/python:latest
        docker stop python
        docker rm python
