# üöÄ Final Project: CI/CD Pipeline for Python Application

![GitHub Actions CI/CD](https://img.shields.io/github/workflow/status/your-username/your-repo-name/CI-CD?logo=github&label=CI/CD%20Pipeline&style=flat-square)

This project implements a full **CI/CD pipeline** using **GitHub Actions**, **Docker**, and **Ansible** to deploy a Python web application into both **testing** and **production environments**.

---

## üìä Architecture Diagram

![CI/CD Architecture](./assets/cicd-architecture.png)

---

## üõ†Ô∏è Key Components

- **CI/CD Automation**: GitHub Actions workflows for:
  - Linting and testing (`Code&Database_Testing.yml`)
  - Testing environment deployment (`TestingEnvironment.yml`)
  - Production deployment (`Production-Environment.yml`)
- **Infrastructure Automation**: Ansible playbooks for:
  - [`TestAnsible.yml`](./ConfigScript/TestAnsible.yml)
  - [`ProductionAnsible.yml`](./ConfigScript/ProductionAnsible.yml)
- **Containerization**: Dockerfile for application packaging
- **Application**: Python-based backend with test suite

---
| Tool           | Purpose                           |
| -------------- | --------------------------------- |
| GitHub Actions | CI/CD automation                  |
| Ansible        | Server configuration & deployment |
| Docker         | Containerization                  |
| Python         | Application language              |
| YAML           | Workflow & playbook syntax        |

## üîÅ CI/CD Pipeline Flow

```text
Git Push
   ‚Üì
GitHub Actions
   ‚Üì
Code & DB Testing (YAML + Python Tests)
   ‚Üì
Docker Build
   ‚Üì
Deploy to Testing Environment via Ansible
   ‚Üì
[Manual Approval]
   ‚Üì
Deploy to Production via Ansible
